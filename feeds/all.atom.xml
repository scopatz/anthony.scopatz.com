<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Anthony Scopatz</title><link href="http://anthony.scopatz.com/" rel="alternate"></link><link href="http://anthony.scopatz.com/feeds/all.atom.xml" rel="self"></link><id>http://anthony.scopatz.com/</id><updated>2013-09-23T00:00:00-05:00</updated><entry><title>About</title><link href="http://anthony.scopatz.com/about.html" rel="alternate"></link><updated>2013-09-23T00:00:00-05:00</updated><author><name>Anthony Scopatz</name></author><id>tag:anthony.scopatz.com,2013-09-23:about.html</id><summary type="html">&lt;p&gt;Anthony Scopatz is a computational scientist and long time Python developer,
Anthony holds his &lt;span class="caps"&gt;BS&lt;/span&gt; in Physics from &lt;span class="caps"&gt;UC&lt;/span&gt;, Santa Barbara and a Ph.D. in
Mechanical / Nuclear Engineering from &lt;span class="caps"&gt;UT&lt;/span&gt; Austin. A former Enthought employee,
he spent his post-doctoral studies at the &lt;span class="caps"&gt;FLASH&lt;/span&gt; Center at the University of
Chicago in the Astrophysics Department. He is currently a Staff Scientist at
the University of Wisconsin-Maidson in Engineering Physics. Anthony’s research
interests revolve around essential physics modeling of the nuclear fuel cycle,
and information theory &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; entropy. Anthony is proudly a fellow of the Python
Software Foundation and has published and spoken at numerous conferences on
a variety of science &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; software development&amp;nbsp;topics.&lt;/p&gt;
</summary></entry><entry><title>Contact</title><link href="http://anthony.scopatz.com/contact.html" rel="alternate"></link><updated>2013-09-23T00:00:00-05:00</updated><author><name>Anthony Scopatz</name></author><id>tag:anthony.scopatz.com,2013-09-23:contact.html</id><summary type="html">&lt;p&gt;Please contact me via email: scopatz _at_ gmail -.-&amp;nbsp;com&lt;/p&gt;
&lt;p&gt;Screaming from the mountains tops does not work as often as it&amp;nbsp;should.&lt;/p&gt;
</summary></entry><entry><title>Scientific Computing at AIMS</title><link href="http://anthony.scopatz.com/scientific-computing-at-aims.html" rel="alternate"></link><updated>2013-09-15T09:00:00-05:00</updated><author><name>Anthony Scopatz</name></author><id>tag:anthony.scopatz.com,2013-09-15:scientific-computing-at-aims.html</id><summary type="html">

&lt;p&gt;&lt;i&gt;
This was originally published at 
&lt;a href="http://software-carpentry.org/blog/2013/09/scientific-computing-at-aims.html"&gt;Software Carpentry&lt;/a&gt;.
&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;
Close on the heels of
&lt;a href="{{page.root}}/bootcamps/2013-08-28-wisc/index.html"&gt;another bootcamp in Madison, &lt;span class="caps"&gt;WI&lt;/span&gt;&lt;/a&gt;, 
for the past two weeks I had the pleasure of teaching a 30 hour scientific 
computing course at the 
&lt;a href="http://aims.ac.za/"&gt;African Institute for Mathematical Sciences&lt;/a&gt; 
(&lt;span class="caps"&gt;AIMS&lt;/span&gt;) in Cape Town, South Africa.  The course was an 
expansion and refactor of Software Carpentry material to fit the &lt;span class="caps"&gt;AIMS&lt;/span&gt; need.
You can find 
&lt;a href="https://bitbucket.org/scopatz/aims-scicomp.git"&gt;the repository of source material here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I could gush about how I fell in love with Cape Town, the 
unexpected preponderance of vegan cafes in Muizenberg, the sea, the sand, 
the mountains, and &lt;i&gt;la dolce vita&lt;/i&gt; I am otherwise 
used to from Santa Barbara. I will not.  &lt;span class="caps"&gt;AIMS&lt;/span&gt; is about the students.  Let&amp;#8217;s examine
them after a brief tour of &lt;span class="caps"&gt;AIMS&lt;/span&gt;&amp;nbsp;itself.
&lt;/p&gt;

&lt;h3&gt;&lt;span class="caps"&gt;AIMS&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;
&lt;span class="caps"&gt;AIMS&lt;/span&gt;, in association with 
&lt;a href="http://www.aims.ac.za/en/about/about-aims/our-partners"&gt;its partner universities&lt;/a&gt;, provides a one year structured masters degree to exceptional 
students from all over Africa.  This provides a needed
stepping stone for many its students to pursue other universities across Africa 
and across the world that they would otherwise likely not have to opportunity to 
attend. The social goals at &lt;span class="caps"&gt;AIMS&lt;/span&gt; go hand in hand with the technical&amp;nbsp;mission.  
&lt;/p&gt;

&lt;p&gt;
The Cape Town &lt;span class="caps"&gt;AIMS&lt;/span&gt; is the first such center and was opened in 2003.  However, other 
&lt;span class="caps"&gt;AIMS&lt;/span&gt; centers are springing up in various other countries on what seems like an annual
basis.  There is also an associated &lt;span class="caps"&gt;AIMS&lt;/span&gt; research center in Cape Town which houses 
some doctoral and post-doctoral students as well as a related center dedicated 
to improving the educational methods of secondary school teachers&amp;nbsp;(&lt;span class="caps"&gt;AIMSSEC&lt;/span&gt;).
&lt;/p&gt;

&lt;p&gt;
The complex itself is a 4 story, 0 indexed building less than 100 meters from 
the ocean.  Floor 0 contains a lecture hall, offices, kitchen and dining area.  
Floor 1 has more offices, the library, and a world class computer lab.  Floor 2 
houses the student dormitories.  Floor 3 houses rooms for some staff and visitors, 
such as myself. In short &lt;span class="caps"&gt;AIMS&lt;/span&gt; is a mathematics monastery straight from my undergraduate 
physics major&amp;nbsp;dreams.
&lt;/p&gt;

&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;img src="http://anthony.scopatz.com/static/images/aims/aims-view.jpg" width="60%" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;The view from my room at &lt;span class="caps"&gt;AIMS&lt;/span&gt;, no&amp;nbsp;fooling.&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;The&amp;nbsp;Students&lt;/h3&gt;

&lt;p&gt;
This year&amp;#8217;s class is approximately 50 students and hail from Egypt to Chad to Nairobi
to South  Africa itself.  In the neighborhood of 20 countries were represented in 
the student body. As William, a student, put it &amp;#8220;by visiting &lt;span class="caps"&gt;AIMS&lt;/span&gt; I visited all of 
Africa.&amp;#8221;  However, national origin is only where the diversity&amp;nbsp;starts.
&lt;/p&gt;

&lt;p&gt;
40% - 50% of the students were women. Furthermore, It seemed that the age 
distribution ranged from mid-twenties to mid-forties. Additionally, though the 
ability to read and understand English was generally quite high, the ability to 
speak or understand spoken English varied from fluent to&amp;nbsp;novice.
&lt;/p&gt;

&lt;p&gt;
Technical ability was also all over the map.  Some of the students it seemed had been
professional Java developers in a past life.  On the other hand there were some 
students who had learned to program Pascal out of a book and arriving at &lt;span class="caps"&gt;AIMS&lt;/span&gt; the 
week before was their first time ever using a&amp;nbsp;computer.  
&lt;/p&gt;

&lt;p&gt;
Still, the students themselves were incredibly enthusiastic.  
Far more so than their Western counterparts 
I have taught.  The computer lab at &lt;span class="caps"&gt;AIMS&lt;/span&gt; is open 24/7.  I would often pop in 
between 11 pm and midnight and categorically I found 20 - 30 students
&lt;i&gt;still&lt;/i&gt; at their machines, working through 
the day&amp;#8217;s material, and discussing what they were learning in small&amp;nbsp;groups.
&lt;/p&gt;

&lt;p&gt;
A cynical person would claim that this phenomenon is due to the students
having nothing else to do in sleepy Muizenberg.  Naturally, they gravitated to 
the place where they have internet activity.  I claim instead that the students acted 
with the purpose of  learning.  No one sits in lectures for six hours a day, 
day in and day out, in a 
language they are still acquiring, and then hits the books for another six hours 
afterwards if they do not feel that what they are doing is important and valuable. 
Perhaps this mathematical monastery should more rightly be denoted &lt;span class="caps"&gt;AIMS&lt;/span&gt;: Academics 
Inconsequent of Mortal&amp;nbsp;Stamina.
&lt;/p&gt;

&lt;h3&gt;The Software&amp;nbsp;Stack&lt;/h3&gt;

&lt;p&gt;
Throughout all of &lt;span class="caps"&gt;AIMS&lt;/span&gt;, including the staff and administration, the software 
distribution is a model for how other, similar centers around the world 
should operate.  Their stack is set up and managed by the preeminent 
&lt;a href="https://plus.google.com/106441031204413066119/posts"&gt;Jan Groenewald&lt;/a&gt;
who I know through the 
illustrious 
&lt;a href="https://plus.google.com/105944382060485784655/posts"&gt;Katy Huff&lt;/a&gt;.
The operating system is Ubuntu, the mail client is GMail, 
and courses are taught only with open source scientific software such as Python, 
SciPy, R, Octave, LaTeX, and Sage. &lt;i&gt;This is my&amp;nbsp;stack.&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
One of the neatest teaching aids that Jan and I ended up test driving and deploying 
is an application called &lt;a href="http://www.epoptes.org/"&gt;epoptes&lt;/a&gt;.  
This is basically a screen sharing program 
with some extra bells and whistles that allow you to take over the student&amp;#8217;s computer
as well.  It was incredibly effective as long as you did not accidentally hit the
button to shut down all of the student&amp;#8217;s&amp;nbsp;machines.
&lt;/p&gt;

&lt;p&gt;
If there was any lingering doubt, it has now been scrubbed away.
The open scientific software stack is 
completely ready for prime time in the classroom. Anyone who is trying to sell 
you something is doing exactly&amp;nbsp;that.  
&lt;/p&gt;

&lt;h3&gt;The&amp;nbsp;Course&lt;/h3&gt;

&lt;p&gt;
I taught the entire course from a series of IPython notebooks cribbed from 
Software Carpentry.  Some of these were tutorials I had originally written 
a couple of years ago.  Humorously, I found that the documentation lesson 
had not been significantly altered in that&amp;nbsp;time.  
&lt;/p&gt;

&lt;p&gt;
However, forking from Software Carpentry required significant amounts of extra
effort in some cases to make the lectures complete for my &lt;span class="caps"&gt;AIMS&lt;/span&gt; needs. (I have since
pull requested these updates back though they are waiting for a merge.)  I was
very tempted to use some material from &lt;a href="http://www.pythonbootcamp.info/"&gt;the 
Python Bootcamp at &lt;span class="caps"&gt;UC&lt;/span&gt; Berkeley&lt;/a&gt;.  I did not because of licenses.  
Software Carpentry material is 
&lt;a href="https://github.com/swcarpentry/bc/blob/gh-pages/LICENSE.md"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt; &lt;span class="caps"&gt;BY&lt;/span&gt; v3.0 licensed&lt;/a&gt;. The Berkeley Python material is 
&lt;a href="https://github.com/profjsb/python-bootcamp/blob/master/LICENSE"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt; &lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;NC&lt;/span&gt;-&lt;span class="caps"&gt;SA&lt;/span&gt; v3.0 licensed&lt;/a&gt;.  
Even though I am not 
currently planning on reusing this material, the threat that I would be forbidden 
from doing so in some circumstances was enough to drive me away from the 
non-commercial copyleft terms. 
Ironically, on the first Tuesday I was at &lt;span class="caps"&gt;AIMS&lt;/span&gt;, the class took a field trip to the 
University of Cape Town to see Richard Stallman speak.  He convinced&amp;nbsp;me.
&lt;/p&gt;

&lt;p&gt;
In terms of the instruction, I had the incidental privilege of giving the first 
lecture of the academic year. It became clear after a few lessons - introduction to 
scientific computing, &lt;span class="caps"&gt;BASH&lt;/span&gt;, git - that I would have to adapt my teaching style. 
Luckily, the students shared an advanced mathematics background.  I could assume that 
they all knew linear algebra, differential equations, and set&amp;nbsp;theory.
&lt;/p&gt;

&lt;p&gt;
Teaching to the middle 80% at &lt;span class="caps"&gt;AIMS&lt;/span&gt; would not have worked.  The students were too 
diverse of a group in too many ways.  Focusing on the mythical middle 80% would 
have meant leaving everyone behind in some way all of the time rather than leaving 
some people out most of the time.  I felt that if I had chosen to teach to the
middle 80% I would be ignoring the core missions of both &lt;span class="caps"&gt;AIMS&lt;/span&gt; and Software&amp;nbsp;Carpentry.
&lt;/p&gt;

&lt;p&gt;
So what changed?  Linguistically, I tried to teach to the bottom 10%.  The students
who already knew English did not mind that I spoke slowly and directly and repeated 
myself often and it made a world of difference to those who did not know English as 
well.  I did not always hit my 10% goal but it was certainly worth trying to get&amp;nbsp;there.
&lt;/p&gt;

&lt;p&gt;
At the tutors&amp;#8217; (teaching assistants) request, we also instituted brief reviews of 
previous material.  Since I taught the shell on the first day we went over 
useful commands on second and third.  This gradually morphed into a generic 
question and answer session at the beginning of every class that would last up to 
30 minutes of a two hour block. For many students, the multi-day reinforcement was&amp;nbsp;critical.
&lt;/p&gt;

&lt;p&gt;
That said, the most fundamental change was that I taught as much as I could in analogy
to mathematical principles.  Functions are functions, operators are operators, 
and sets are sets.  This made certain topics, such as slicing and 
recursion much easier, but other topics, such as decorators and scoping, a little 
more&amp;nbsp;difficult.
&lt;/p&gt;

&lt;p&gt;
Overall, after I made these adjustments, the course went smoothly.  I would love to 
have the opportunity to go back and restructure the entire course with &lt;span class="caps"&gt;AIMS&lt;/span&gt; students
in mind now that I know who they are and how they differ from the standard 
research-distracted Western graduate&amp;nbsp;student.
&lt;/p&gt;

&lt;h3&gt;Results&lt;/h3&gt;

&lt;p&gt;
As any good instructor would do, I ran assessment surveys before and after the 
course.  This is as much to gauge the students as my teaching ability.  Since
the course was derived from Software Carpentry I used the official
&lt;a href="http://software-carpentry.org/bootcamps/index.html#assessment"&gt;pre- and post-assessment surveys&lt;/a&gt;.  
Since the raw data is not anonymized, if you would like access to it please contact&amp;nbsp;me.
&lt;/p&gt;

&lt;p&gt;
On the subject of programming to do basic data analysis tasks, a huge leap was 
made over the course of the two weeks.  &lt;a href="#fig1"&gt;Figure 1&lt;/a&gt; shows a 
comparison for tasks involving opening a plaintext file, reading in data, and 
computing summary statistics.  Most students went from not knowing where to start 
to feeling that they could successfully accomplish this task given enough&amp;nbsp;time.
&lt;/p&gt;

&lt;div style="text-align:center" id="fig1"&gt;
&lt;p&gt;&lt;img src="http://anthony.scopatz.com/static/images/aims/aims-fig1.svg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Figure 1:&lt;/b&gt; (a) Pre-assessment question, &lt;i&gt;&amp;#8220;Write a short program to read a 
file containing columns of numbers separated by commas, average the non-negative 
values in the second and fifth columns, and print the results.&amp;#8221;&lt;/i&gt; 
(b) Post-assessment question, &lt;i&gt;&amp;#8220;A comma-delimited file has two columns showing 
the date and the number of sun spots recorded for that day. Write a program to 
produce a graph showing the average number of sun spots for each&amp;nbsp;month.&amp;#8221;&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
However, the most staggering advancement was with respect to the shell.  
This makes a certain amount of sense as &lt;span class="caps"&gt;BASH&lt;/span&gt; was the first technical subject we 
discussed.  Consequently, the shell was the most reinforced material. It was 
reviewed at least once per day.  &lt;a href="#fig2"&gt;Figure 2&lt;/a&gt; shows that the 
distribution in ability basically&amp;nbsp;flipped.
&lt;/p&gt;

&lt;div style="text-align:center" id="fig2"&gt;
&lt;p&gt;&lt;img src="http://anthony.scopatz.com/static/images/aims/aims-fig2.svg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Figure 2:&lt;/b&gt; (a) Pre-assessment question, &lt;i&gt;&amp;#8220;In a directory with 1000 text files, 
create a list of all files that contain the word Drosophila, and redirect the output 
to a file called results.txt.&amp;#8221;&lt;/i&gt; (b) Post-assessment question, &lt;i&gt;&amp;#8220;How familiar do 
you think you are with the command line&amp;nbsp;shell?&amp;#8221;&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Lastly, I made an unorthodox decision to try to teach version control as early as
possible.  So the second day, right after the shell lectures, we spent 4 hours on 
the details of how to use git.  I mostly received blank stares.  However since 
I ran the course from a bitbucket repository the students had ample opportunity 
to reinforce what they learned.  &lt;a href="#fig3"&gt;Figure 3&lt;/a&gt; displays an 
advancement that, while not quite as staggering as those above, is great to 
see given the importance of the topic.  I doubt that any of the students would now 
say that they do not know what version control is and what it is useful for, even 
if they claim to not know how to use&amp;nbsp;git.
&lt;/p&gt;

&lt;div style="text-align:center" id="fig3"&gt;
&lt;p&gt;&lt;img src="http://anthony.scopatz.com/static/images/aims/aims-fig3.svg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Figure 3:&lt;/b&gt; (a) Pre-assessment question, &lt;i&gt;&amp;#8220;Check out a working copy of a 
project from version control, add a file called paper.txt, and commit the 
change.&amp;#8221;&lt;/i&gt; (b) Post-assessment question, &lt;i&gt;&amp;#8220;How familiar do you think you are 
with the version control stem used in your&amp;nbsp;bootcamp?&amp;#8221;&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Overall, I find these results very encouraging.  I was able to seed some fundamental
best practices.  However, it is now up to the &lt;span class="caps"&gt;AIMS&lt;/span&gt; staff and tutors to shore up
these ideas with continued education and practice.  As this was a self assessment, 
and not a competency assessment per-say, the students definitely seemed to take 
something away&amp;nbsp;themselves. 
&lt;/p&gt;

&lt;h3&gt;Parting&lt;/h3&gt;

&lt;p&gt;
At the end of the two weeks, the students sat me down in a chair at the front of 
the class and presented me with a thank you card. Along with this they read 
a statement prepared by the class.  This was definitely one of the most rewarding
moments of the course - and possibly of my life to date.  I wanted to laugh and 
cry at the same time.  The statement went as&amp;nbsp;follows:
&lt;/p&gt;

&lt;blockquote&gt;
We are so grateful for teaching us the course Scientific Computing, 
the Python language especially. We are also grateful to your style of lecturing in 
that you welcomed questions and you were so patient with everyone despite our 
variety of accents. You answers every question by first saying, and I quote 
&amp;#8220;Aaaah, Okaaaay, that&amp;#8217;s a very good question.&amp;#8221; This encouraged all of us to ask 
question and we benefited - we are really grateful.
&lt;/blockquote&gt;

&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;img src="http://anthony.scopatz.com/static/images/aims/aims-farewell.jpg" width="60%" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Taken while I listen to the goodbye speech from the&amp;nbsp;students.&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The student William from before also got up and said a few words, some of 
which were, &amp;#8220;Anthony, you are not a trained teacher, but a born teacher.&amp;#8221;
I really appreciate this comment on all&amp;nbsp;levels.
&lt;/p&gt;

&lt;p&gt;
However, the real showcase of the impact that this course had is 
in what the students wrote in the card.  My favorite and most telling inscriptions&amp;nbsp;were: 
&lt;/p&gt;

&lt;blockquote&gt;
audrey = &amp;#8220;thank you Anthony&amp;#8221;
&lt;br /&gt;
print audrey
&lt;/blockquote&gt;

&lt;blockquote&gt;
keep in touch - git pull
&lt;/blockquote&gt;

&lt;blockquote&gt;
I may forget Python, but not you.  Thank you!!
&lt;/blockquote&gt;

&lt;h3&gt;Final&amp;nbsp;Thanks&lt;/h3&gt;

&lt;p&gt;
Personally, I would like to thank Barry Green, Jeff Sanders, and Jan Groenewald for
giving &lt;span class="caps"&gt;AIMS&lt;/span&gt; its superior environment and extending to me the opportunity to come
and lecture about some of my favorite topics.  Additionally, I&amp;#8217;d like to thanks
the class tutors, Adriaan van Vuuren, Antonio Cardoso, Eva Ujeneza, 
Evans Ocansey, Markus Kruger, Mekdes Tessema, and Morgan Magloire Pene, 
there is no doubt in my mind that the class would not have run half as&amp;nbsp;well.
&lt;/p&gt;

&lt;p&gt;
In closing, &lt;span class="caps"&gt;AIMS&lt;/span&gt; is an incredibly special place.  If you ever have and opportunity
to visit the Cape Town campus or another location I highly encourage you to take it.
I promise that you will not regret&amp;nbsp;it!
&lt;/p&gt;

&lt;div style="text-align:center"&gt;
&lt;p&gt;&lt;img src="http://anthony.scopatz.com/static/images/aims/aims-end.jpg" width="60%" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Jubilant photograph with the students after the final&amp;nbsp;lecture.&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;

</summary><category term="teaching"></category></entry><entry><title>Thence FLASH, Thither UW</title><link href="http://anthony.scopatz.com/thence-flash-thither-uw.html" rel="alternate"></link><updated>2013-06-02T09:00:00-05:00</updated><author><name>Anthony Scopatz</name></author><id>tag:anthony.scopatz.com,2013-06-02:thence-flash-thither-uw.html</id><summary type="html">

&lt;p&gt;&lt;i&gt;
This was originally published at 
&lt;a href="http://inscight.org/2013/06/02/thence-flash-thither-uw/"&gt;inSCIght&lt;/a&gt;.
&lt;/i&gt;&lt;/p&gt;


&lt;div&gt;
&lt;h2&gt;Life&amp;nbsp;Update&lt;/h2&gt;
&lt;br /&gt;
&lt;div&gt;I am not really sure where to post this, so I have decided that inSCIght is as good a place as any.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;Due to our current funding round coming up during &lt;a href="http://www.whitehouse.gov/issues/sequester"&gt;the sequester&lt;/a&gt;,  &lt;a href="http://flash.uchicago.edu/site/"&gt;the Flash Center&lt;/a&gt; is currently scaling back to focus on its core mission.  &lt;strong&gt;So my job as a Research Scientist at the University of Chicago will eventually go away.&lt;/strong&gt;  I was not laid off today nor would I have been tomorrow.  I would have likely been able to remain at the Flash Center for up to another year.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;However, I like being proactive in these situations and in being proactive new opportunities present themselves.  As of yesterday, &lt;strong&gt;I am now an Assistant Visiting Scientist in the Engineering Physics department at the University of Wisconsin-Madison.&lt;/strong&gt;  In many ways this is a return to Computational Nuclear Engineering and Fuel Cycle research.  But don&amp;#8217;t get me wrong, I thoroughly enjoyed my time researching in Plasma Physics and High-Energy Density Physics.  &lt;em&gt;Crescat scientia, vita excolatur!&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;From here on I&amp;#8217;ll be working with the research groups of &lt;a href="https://directory.engr.wisc.edu/ep/faculty/wilson_paul" target="_blank"&gt;Dr. Paul Wilson&lt;/a&gt;.  Paul is very supportive of open source scientific computing and this software ecosystem as part of his critical research path.  By hiring me, relevant projects &amp;#8212; namely &lt;a href="http://cyclus.github.io/"&gt;Cyclus&lt;/a&gt; and &lt;a href="http://pynesim.org/"&gt;PyNE&lt;/a&gt; &amp;#8212; now become my full time job.   Other projects that I contribute to &amp;#8212; &lt;a href="http://pytables.github.io/"&gt;PyTables&lt;/a&gt;, &lt;a href="https://s3.amazonaws.com/xdress/index.html"&gt;xdress&lt;/a&gt;, and other minutia around the SciPy ecosystem &amp;#8212; play a synergistic role with my main duties and I am free to continue helping with.  Furthermore, after checking with the rest of the board that there were no unforeseen conflicts of interest, I will remain the treasurer and a board member for &lt;a href="http://numfocus.org/"&gt;NumFOCUS&lt;/a&gt;.  I am very happy about this since NumFOCUS has been doing some really great things lately!&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;Lastly, for some family health related reasons, the position that I have taken at &lt;span class="caps"&gt;UW&lt;/span&gt; is 3/4 remote &amp;#8212; ie 1 week / month I will physically be in Madison.  Starting August 1, I will be moving out of Chicago begin splitting my time between Santa Barbara, Madison, and Austin.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div&gt;If you have any questions for me, or just want to chat, don&amp;#8217;t hesitate to contact me and ask.&lt;/div&gt;
&lt;br /&gt;&lt;div&gt;&lt;em&gt;Gloria perpetua!&lt;/em&gt;&lt;/div&gt;
</summary></entry><entry><title>The Shining: Panda Edition</title><link href="http://anthony.scopatz.com/the-shining-panda-edition.html" rel="alternate"></link><updated>2013-01-19T00:00:00-06:00</updated><author><name>Anthony Scopatz</name></author><id>tag:anthony.scopatz.com,2013-01-19:the-shining-panda-edition.html</id><summary type="html">&lt;div class="section" id="or-adventures-in-ci-py"&gt;
&lt;h2&gt;Or, Adventures in &lt;span class="caps"&gt;CI&lt;/span&gt;&amp;nbsp;Py&lt;/h2&gt;
&lt;p&gt;As some of you may know I help run an open source nuclear engineering project called
&lt;a class="reference external" href="http://www.pynesim.org/"&gt;PyNE&lt;/a&gt;.  It is awesome, and complicated.  It isn’t
complicated because it is nuclear related.  It is complicated because we provide
C++ and Python APIs (which are idiomatic to each language) and data.  We also have
the dream of being truly multiplatform (someday Windows, someday).  From this point
on I’ll only be speaking for myself, and not on behalf of other PyNE&amp;nbsp;devs.&lt;/p&gt;
&lt;p&gt;About 6 months ago, I gave up and admitted that since we develop a Python-independent
C++ library [1] we should start acting like one.  Driven largely by Katy Huff and
enabled by Matt McCormick’s
&lt;a class="reference external" href="https://github.com/thewtex/cython-cmake-example"&gt;cmake-cython-example&lt;/a&gt;,
we rightly ditched my ridiculously monkey patched version of distutils in favor
of CMake, subprocess, and out-of-the-box distutils.  It has been&amp;nbsp;fantastic.&lt;/p&gt;
&lt;p&gt;The natural next step to this is continuous integration (&lt;span class="caps"&gt;CI&lt;/span&gt;).  After all, most other projects I have worked on in the SciPy community have gone to some form of &lt;span class="caps"&gt;CI&lt;/span&gt;.  It couldn’t be that hard, right?  Wrong.  Very wrong.  Sad panda&amp;nbsp;wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-1-travis-ci"&gt;
&lt;h2&gt;Attempt 1: Travis&amp;nbsp;&lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Travis &lt;span class="caps"&gt;CI&lt;/span&gt; seems like a great tool: github integration, ubuntu vm with sudo access, 20 minute build times before timeout.  It certainly works for a lot of big projects, but it failed for PyNE.  The first issue that you are faced with in &lt;span class="caps"&gt;CI&lt;/span&gt; is the packaging problem.  Since I enjoy not reinventing the wheel, the depth of our dependency stack is kept in check only by social pressures that I feel from other&amp;nbsp;developers.&lt;/p&gt;
&lt;p&gt;With Travis &lt;span class="caps"&gt;CI&lt;/span&gt;, for compiled library dependencies you are supposed to use “sudo apt-get install” to install packages during your pre-build.   Fine. We have an &lt;span class="caps"&gt;HDF5&lt;/span&gt; dependency.  Easy peasy.  However, for Python code you have to use  pip and virtualenv.  What?&amp;nbsp;Really?&lt;/p&gt;
&lt;p&gt;We have a SciPy dependency, which I feel is a pretty normal thing to have.  But the Cheese Shop version of SciPy is source-only.  This means for a SciPy dependency you have to first apt-get gfortran, &lt;span class="caps"&gt;BLAS&lt;/span&gt;, lapack, and the rest of the SciPy dependencies.  &lt;span class="caps"&gt;THEN&lt;/span&gt; you have to compile SciPy.  You can kiss half of your 20 minute allocation&amp;nbsp;goodbye.&lt;/p&gt;
&lt;p&gt;Since our compile times our a couple of minutes and it can take a few minutes to pull down all of the data we need, build times were easily 15+ mins.  And we haven’t even gotten to testing yet.  What is really frustrating is that most of this time was unnecessarily spent compiling SciPy…. which has its own &lt;span class="caps"&gt;CI&lt;/span&gt; services  doing this all the time! Furthermore the python-scipy debian package is sitting there, taunting you the whole time.  (“Look at me all pretty and&amp;nbsp;built!”)&lt;/p&gt;
&lt;p&gt;Still it almost works.  The build times remained under 20 minutes.
Then when we started getting &lt;a class="reference external" href="https://travis-ci.org/pyne/pyne/builds/4224346"&gt;random segfaults in testing&lt;/a&gt;
with no good method to debug them, I eventually gave&amp;nbsp;up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-shining-panda"&gt;
&lt;h2&gt;Attempt 2: Shining&amp;nbsp;Panda&lt;/h2&gt;
&lt;p&gt;This story has a happier, if no less frustrating, ending.  The kind folks at
&lt;a class="reference external" href="https://www.shiningpanda-ci.com/"&gt;Shining Panda&lt;/a&gt; (&lt;span class="caps"&gt;SP&lt;/span&gt;) have provided PyNE with
a Jenkins instance.  (Thanks a million bamboo stalks!)  Compared to Travis&amp;nbsp;&lt;span class="caps"&gt;CI&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ssh access to the&amp;nbsp;&lt;span class="caps"&gt;VM&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;can completely avoid&amp;nbsp;virtualenv&lt;/li&gt;
&lt;li&gt;and commit changes to the&amp;nbsp;&lt;span class="caps"&gt;VM&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;no sudo access (and installing debian packages in user space&amp;nbsp;sucks)&lt;/li&gt;
&lt;li&gt;default packages not as&amp;nbsp;up-to-date&lt;/li&gt;
&lt;li&gt;less well&amp;nbsp;documented&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I finally got &lt;span class="caps"&gt;SP&lt;/span&gt; up and running and all of the tests passing, but it took a lot of trial and error.  This is because, unlike Travis &lt;span class="caps"&gt;CI&lt;/span&gt; where you can look at other project’s ‘.travis.yml’ files, you can’t inspect the configurations of other &lt;span class="caps"&gt;SP&lt;/span&gt; projects.  I even have user access to the yt-project’s &lt;span class="caps"&gt;SP&lt;/span&gt; Jenkins instance, but because I am not an admin or a super-admin I couldn’t see the config.  To add to the frustration, every time you wanted to start up a new &lt;span class="caps"&gt;VM&lt;/span&gt; to test the build or ssh into the machine it took 5 – 10 minutes.  I am complaining because The 47 iterations I needed to get this right took me 2.5 days [2].  It is a good thing I really believe in these&amp;nbsp;tools…&lt;/p&gt;
&lt;p&gt;Additionally, after the Travis &lt;span class="caps"&gt;CI&lt;/span&gt; experience, I was dead set against compiling anything that wasn’t PyNE.  Since &lt;span class="caps"&gt;SP&lt;/span&gt; doesn’t give you sudo access I ended up using
&lt;a class="reference external" href="https://www.shiningpanda-ci.com/"&gt;Anaconda &lt;span class="caps"&gt;CE&lt;/span&gt;&lt;/a&gt;.    Why Anaconda &lt;span class="caps"&gt;CE&lt;/span&gt; and not
&lt;a class="reference external" href="http://www.enthought.com/products/epd_free.php"&gt;&lt;span class="caps"&gt;EPD&lt;/span&gt; Free&lt;/a&gt; or something else?
Anaconda has PyTables and a compiler (but sadly no&amp;nbsp;CMake).&lt;/p&gt;
&lt;p&gt;Having installed Anaconda inside ssh, I then cloned PyNE, built it, installed it, grabbed the data, and ran the tests.  Worked like a dream.  If only the pain ended there… (This is starting to sound like a broken record by the&amp;nbsp;Police.)&lt;/p&gt;
&lt;p&gt;It turns out the shell that Jenkins uses to build is different from the shell that ssh gives you.  Annoyingly, the source command isn’t available in the build shell so you can’t even start you build off with a “source ~/.bashrc” to recover most of your normal environment.  Damn.  To get around this I ended up exporting a lot of variables at the top of the build script, such as &lt;span class="caps"&gt;PATH&lt;/span&gt;, &lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;, LD_LIBARRY_PATH. (I never did figure out where source&amp;nbsp;went.)&lt;/p&gt;
&lt;p&gt;After that, all of the Python stuff works well.  However even though it is receiving the correct environment, CMake’s FindPythonInterp, FindPythonLib, and FindPythonLibsNew (PyNE and numexpr) totally failed to find the Anaconda install.  I have no idea why.  The environment really was being passed down properly (I verified this in Python and CMake).  To fix this problem, a bunch of environment variables have to be re-passed down into&amp;nbsp;CMake!&lt;/p&gt;
&lt;p&gt;Unfortunately not everything can even be passed in from the command line.  Thus, I had to create a special &lt;span class="caps"&gt;CI&lt;/span&gt;-mode in the CMakeLists.txt file, to optionally set a couple paths that are otherwise &lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;nbsp;unresponsive.&lt;/p&gt;
&lt;p&gt;For posterity, my Jenkins build script is&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/bin:&lt;span class="nv"&gt;$&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/cmake-2.8.10.2/bin:&lt;span class="nv"&gt;$&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/.local/bin:&lt;span class="nv"&gt;$&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/.local/lib/python2.7/site-packages:&lt;span class="nv"&gt;$&lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/lib/python2.7:&lt;span class="nv"&gt;$&lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/lib/python2.7/site-packages:&lt;span class="nv"&gt;$&lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/lib/python2.7/lib-dynload:&lt;span class="nv"&gt;$&lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/lib:&lt;span class="nv"&gt;$LD_LIBRARY_PATH&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;C_INCLUDE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/include:&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/include/python2.7:&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;C_INCLUDE_PATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PYTHON_EXE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which python&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CMAKE_MODULE_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;/cmake:&lt;span class="nv"&gt;$CMAKE_MODULE_PATH&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;---- &lt;span class="caps"&gt;INFO&lt;/span&gt; ----&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;pwd&lt;/span&gt;
ls -lh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt;
which &lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt;
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; -V
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;import sys; print &amp;#39;sys.path =\n &amp;#39; + &amp;#39;\n &amp;#39;.join(sys.path)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;import numpy; print &amp;#39;numpy version:&amp;#39;, numpy.__version__&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;import scipy; print &amp;#39;scipy version:&amp;#39;, scipy.__version__&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;import Cython; print &amp;#39;cython version:&amp;#39;, Cython.__version__&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;import numexpr; print &amp;#39;numexpr version:&amp;#39;, numexpr.__version__&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; -c &lt;span class="s2"&gt;&amp;quot;import tables; print &amp;#39;pytables version:&amp;#39;, tables.__version__&amp;quot;&lt;/span&gt;
cmake --version
&lt;span class="nb"&gt;echo&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;---- &lt;span class="caps"&gt;BUILD&lt;/span&gt; ----&amp;#39;&lt;/span&gt;
rm -rf build build_nuc_data &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/.local/lib/python2.7/site-packages
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; setup.py install --user -- &lt;span class="se"&gt;\&lt;/span&gt;
 -DIS_CI&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="caps"&gt;TRUE&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
 -DPYTHON_EXECUTABLE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
 -DPYTHON_PREFIX&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda &lt;span class="se"&gt;\&lt;/span&gt;
 -DPYTHON_LIBRARY&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/lib/libpython2.7.so &lt;span class="se"&gt;\&lt;/span&gt;
 -DPYTHON_INCLUDE_DIR&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;&lt;span class="caps"&gt;HOME&lt;/span&gt;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/anaconda/include/python2.7
&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt; scripts/nuc_data_make
&lt;span class="nb"&gt;cd &lt;/span&gt;pyne/tests
nosetests
&lt;span class="nb"&gt;cd&lt;/span&gt; ../xs/tests
nosetests
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Finally, everything works.  Shining Panda has already helped uncover a few bugs in our test suite.  So yippee for that!  But given how difficult this whole process was (as say compared to installing and running nosetests), continuous integration is ironically the least stable part of PyNE.  For&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Here is to hoping these tools keep getting&amp;nbsp;better!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;[1] From my point of view the C++ &lt;span class="caps"&gt;API&lt;/span&gt; is a carrot to get more people using&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;[2] I don’t think that this is Shining Panda’s fault.  I think it is a limitation of the underlying&amp;nbsp;tools.&lt;/p&gt;
&lt;/div&gt;
</summary></entry></feed>